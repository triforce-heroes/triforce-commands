import{BufferConsumer as e}from"@triforce-heroes/triforce-core/BufferConsumer";import{CommandsMatcher as t}from"../CommandsMatcher.js";import{Driver as r}from"../Driver.js";import{EntryCommandDefined as f}from"../entries/EntryCommandDefined.js";let n=/[\x0e\x0f\u{e000}-\u{efff}]/u,o=new t(e=>n.test(e),(e,t)=>{let r=n.exec(e.slice(t));return null===r?-1:r.index+t});o.addExpression(/[\ue000-\uefff]/),o.addExpression(/\x0e..(?<length>.)/u,e=>e.groups.length.codePointAt(0)/2),o.addExpression(/\x0f\x01\x10/u),o.addExpression(/\x0f\x02\x02/u),o.addExpression(/\x0f\x02\0/u),o.addFailureLiteral("\x0e"),o.addFailureLiteral("\x0f");export const ZTFH=new r("ZTFH",e=>o.match(e),t=>{if(1===t.length)return new f(t,{type:0xffff00,subtype:0,attributes:[t.codePointAt(0)]});if(t.startsWith("\x0f"))return new f(t,{type:0xffff0f,subtype:0,attributes:[t.codePointAt(1),t.codePointAt(2)]});let r=new e(Buffer.from(t),1),n=r.readUnsignedInt8(),o=r.readUnsignedInt8(),i=[],s=Buffer.from(t.slice(4),"utf16le");for(let e=0;e<s.length;e+=2)i.push(s.readUInt16LE(e));return new f(t,{type:n,subtype:o,attributes:i})});